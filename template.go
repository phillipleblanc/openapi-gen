// Code generated by go-bindata.
// sources:
// tmpl/swagger.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x41\x8b\xdb\x3c\x10\xbd\x07\xf2\x1f\x06\x93\xe3\xc6\x84\x3d\x1a\xbe\xcb\x7e\x5b\x76\x0b\xdd\x12\xda\xd0\xbb\x6a\x8f\x6d\xb1\x91\xe4\xce\xc8\xd9\x86\xc4\xff\xbd\xc8\xb2\x63\x29\x26\x5d\xe8\xa1\x34\xa7\xe8\xcd\x9b\xa7\xf7\x34\x83\xf9\x4d\x54\x15\x52\x06\xc9\x7d\xba\x49\x96\x0b\xa9\x4b\x93\x2d\x17\x00\x05\x72\x4e\xb2\xb1\xd2\xe8\x0c\x92\xd3\x09\xd2\xff\x8d\x2e\x65\x95\x3e\x4e\x05\xe8\xba\xc4\x71\x0f\x48\x3c\xe3\x7d\xf3\xe0\xc8\xb1\xd2\xee\x31\x66\xec\x1c\xe4\xeb\xb5\x61\x1b\x17\x9f\x0d\x5b\x5f\xfb\x2e\x18\xb7\xc2\xd6\x71\xfd\x61\x40\x3d\xc7\x8a\x8a\xb3\xe5\xe2\x74\x02\x12\xba\x42\x58\xbd\xe2\xf1\x0e\x56\x07\xb1\x6f\x11\xb2\xff\x20\xfd\xa0\xad\xb4\x12\x19\xba\x6e\xb9\x58\x83\x16\x6a\x30\xe3\x98\x70\x86\x27\xb4\x4f\x64\xda\xe6\xb3\x50\x38\x5a\x8e\x9f\x20\xe9\xe5\x51\x17\xbd\x04\xe7\x35\x2a\x74\x77\xae\x23\x5b\x5f\x3d\xee\x25\x1a\x61\x6b\x6f\x6b\x1d\xfb\xea\x0b\x73\x5f\x01\xcf\x31\xee\x60\x45\xc8\xa6\xa5\x1c\x7b\xf2\xd0\xe6\x98\x00\xce\xba\x3b\xc3\x19\xbe\xa0\x32\x87\xfe\x31\xb6\x84\xa5\xfc\xd9\x75\xfd\x04\x1d\x67\xba\xf7\x35\x50\xeb\xc5\x26\x69\x2f\xe8\x25\x47\x34\x7d\x41\x5b\x9b\x02\xce\xb0\x33\x9f\xcc\x1b\x12\x5c\x54\x01\x86\xd7\xf6\x87\xf5\x7b\xcf\xe8\x7e\xdc\x2a\x25\xe8\x38\x3c\xf9\xe5\x92\x6b\x9a\x33\x2c\x4b\x30\x14\x70\x3e\x6a\x36\x4a\x4b\xb1\x15\x24\x14\x07\x85\x07\x53\x1c\xd3\x19\xfa\x8c\xa2\x40\x9a\x42\x5d\x44\xaf\x1a\x5f\xa4\xc2\xdd\xb1\xc1\x80\x98\x1b\xcd\xad\x1f\x2a\x40\x14\xee\x66\x6b\xe4\x7c\xdc\x0d\x8f\x34\xce\x19\x5a\xa4\x49\x2f\x9c\x6f\xbf\x05\x24\x54\x34\x8b\xab\xb0\x93\x58\xb4\xb1\xbe\x2f\xb8\x1c\x40\xba\x0d\x75\xeb\x10\x60\xf6\xd8\xb8\x0e\xb6\x24\x75\x15\xe0\xb3\xb5\x1e\x0b\x84\x3f\x5a\x49\x58\x64\x60\xa9\xc5\xdb\xc9\xde\x8f\x11\x8c\xe6\x77\x19\x66\xf3\x1f\x82\x94\x86\xd4\xa3\xb0\xe2\xdf\x08\x33\x6c\xd4\x9f\x04\xa9\xfb\xd6\xbf\x15\x23\x46\x08\xb9\x31\x9a\xa3\x75\xbe\xdf\x6c\x82\xd3\xf5\xb5\xdc\xe6\x39\x32\x97\xed\x1e\x4c\x83\x24\x1c\x9c\x4c\x5f\x92\x51\xfe\xd6\xff\x5f\x01\x00\x00\xff\xff\x73\x7f\x08\x16\x4b\x06\x00\x00")

func tmplSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmplSwaggerYaml,
		"tmpl/swagger.yaml",
	)
}

func tmplSwaggerYaml() (*asset, error) {
	bytes, err := tmplSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/swagger.yaml", size: 1611, mode: os.FileMode(438), modTime: time.Unix(1512569395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/swagger.yaml": tmplSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"swagger.yaml": &bintree{tmplSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

